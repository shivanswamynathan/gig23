# Generated by Django 5.2.3 on 2025-06-24 04:07

import django.core.validators
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('document_processing', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ItemWiseGrn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('s_no', models.IntegerField(help_text='Serial number from the uploaded file', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Serial Number')),
                ('type', models.CharField(blank=True, help_text='Type of transaction (e.g., InterStock)', max_length=100, null=True, verbose_name='Type')),
                ('sku_code', models.CharField(blank=True, db_index=True, help_text='Stock Keeping Unit code', max_length=100, null=True, verbose_name='SKU Code')),
                ('category', models.CharField(blank=True, help_text='Product category', max_length=255, null=True, verbose_name='Category')),
                ('sub_category', models.CharField(blank=True, help_text='Product sub-category', max_length=255, null=True, verbose_name='Sub Category')),
                ('item_name', models.CharField(blank=True, help_text='Name/description of the item', max_length=500, null=True, verbose_name='Item Name')),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement (piece, kg, etc.)', max_length=50, null=True, verbose_name='Unit')),
                ('grn_no', models.CharField(blank=True, db_index=True, help_text='Goods Receipt Note Number', max_length=200, null=True, verbose_name='GRN Number')),
                ('hsn_no', models.CharField(blank=True, help_text='Harmonized System of Nomenclature code', max_length=20, null=True, verbose_name='HSN Code')),
                ('po_no', models.CharField(blank=True, db_index=True, help_text='Purchase Order Number', max_length=200, null=True, verbose_name='PO Number')),
                ('remarks', models.TextField(blank=True, help_text='Additional remarks or notes', null=True, verbose_name='Remarks')),
                ('created_by', models.CharField(blank=True, help_text='Person who created the GRN', max_length=255, null=True, verbose_name='Created By')),
                ('grn_created_at', models.DateField(blank=True, help_text='Date when GRN was created', null=True, verbose_name='GRN Created Date')),
                ('seller_invoice_no', models.CharField(blank=True, help_text='Invoice number from seller', max_length=200, null=True, verbose_name='Seller Invoice Number')),
                ('supplier_invoice_date', models.DateField(blank=True, help_text='Date of supplier invoice', null=True, verbose_name='Supplier Invoice Date')),
                ('supplier', models.CharField(blank=True, db_index=True, help_text='Supplier/vendor name', max_length=500, null=True, verbose_name='Supplier')),
                ('concerned_person', models.CharField(blank=True, help_text='Person responsible for the transaction', max_length=255, null=True, verbose_name='Concerned Person')),
                ('pickup_location', models.CharField(blank=True, help_text='Pickup location name', max_length=500, null=True, verbose_name='Pickup Location')),
                ('pickup_gstin', models.CharField(blank=True, help_text='GST Identification Number for pickup location', max_length=15, null=True, verbose_name='Pickup GSTIN')),
                ('pickup_code', models.CharField(blank=True, help_text='Pickup location code', max_length=100, null=True, verbose_name='Pickup Code')),
                ('pickup_city', models.CharField(blank=True, help_text='Pickup city', max_length=255, null=True, verbose_name='Pickup City')),
                ('pickup_state', models.CharField(blank=True, help_text='Pickup state', max_length=255, null=True, verbose_name='Pickup State')),
                ('delivery_location', models.CharField(blank=True, help_text='Delivery location name', max_length=500, null=True, verbose_name='Delivery Location')),
                ('delivery_gstin', models.CharField(blank=True, help_text='GST Identification Number for delivery location', max_length=15, null=True, verbose_name='Delivery GSTIN')),
                ('delivery_code', models.CharField(blank=True, help_text='Delivery location code', max_length=100, null=True, verbose_name='Delivery Code')),
                ('delivery_city', models.CharField(blank=True, help_text='Delivery city', max_length=255, null=True, verbose_name='Delivery City')),
                ('delivery_state', models.CharField(blank=True, help_text='Delivery state', max_length=255, null=True, verbose_name='Delivery State')),
                ('price', models.DecimalField(blank=True, decimal_places=4, help_text='Unit price of the item', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0000'))], verbose_name='Price')),
                ('received_qty', models.DecimalField(blank=True, decimal_places=4, help_text='Quantity received', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0000'))], verbose_name='Received Quantity')),
                ('returned_qty', models.DecimalField(blank=True, decimal_places=4, help_text='Quantity returned', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.0000'))], verbose_name='Returned Quantity')),
                ('discount', models.DecimalField(blank=True, decimal_places=2, help_text='Discount amount', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Discount')),
                ('tax', models.DecimalField(blank=True, decimal_places=2, help_text='Tax rate percentage', max_digits=5, null=True, verbose_name='Tax Rate')),
                ('sgst_tax', models.DecimalField(blank=True, decimal_places=2, help_text='State GST rate percentage', max_digits=5, null=True, verbose_name='SGST Tax Rate')),
                ('sgst_tax_amount', models.DecimalField(blank=True, decimal_places=2, help_text='State GST amount', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='SGST Tax Amount')),
                ('cgst_tax', models.DecimalField(blank=True, decimal_places=2, help_text='Central GST rate percentage', max_digits=5, null=True, verbose_name='CGST Tax Rate')),
                ('cgst_tax_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Central GST amount', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='CGST Tax Amount')),
                ('igst_tax', models.DecimalField(blank=True, decimal_places=2, help_text='Integrated GST rate percentage', max_digits=5, null=True, verbose_name='IGST Tax Rate')),
                ('igst_tax_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Integrated GST amount', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='IGST Tax Amount')),
                ('cess', models.DecimalField(blank=True, decimal_places=2, help_text='Cess amount', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Cess')),
                ('subtotal', models.DecimalField(blank=True, decimal_places=2, help_text='Subtotal before taxes', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Subtotal')),
                ('vat_percent', models.CharField(blank=True, help_text='VAT percentage', max_length=20, null=True, verbose_name='VAT Percentage')),
                ('vat_amount', models.CharField(blank=True, help_text='VAT amount', max_length=50, null=True, verbose_name='VAT Amount')),
                ('item_tcs_percent', models.CharField(blank=True, help_text='Item TCS percentage', max_length=20, null=True, verbose_name='Item TCS Percentage')),
                ('item_tcs_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Item TCS amount', max_digits=15, null=True, verbose_name='Item TCS Amount')),
                ('tax_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Total tax amount', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Total Tax Amount')),
                ('bill_tcs', models.DecimalField(blank=True, decimal_places=2, help_text='Bill TCS amount', max_digits=15, null=True, verbose_name='Bill TCS')),
                ('delivery_charges', models.DecimalField(blank=True, decimal_places=2, help_text='Delivery charges', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Delivery Charges')),
                ('delivery_charges_tax_percent', models.DecimalField(blank=True, decimal_places=2, help_text='Tax percentage on delivery charges', max_digits=5, null=True, verbose_name='Delivery Charges Tax Percentage')),
                ('additional_charges', models.DecimalField(blank=True, decimal_places=2, help_text='Additional charges', max_digits=15, null=True, verbose_name='Additional Charges')),
                ('inv_discount', models.DecimalField(blank=True, decimal_places=2, help_text='Invoice level discount', max_digits=15, null=True, verbose_name='Invoice Discount')),
                ('round_off', models.DecimalField(blank=True, decimal_places=2, help_text='Round off amount', max_digits=15, null=True, verbose_name='Round Off')),
                ('total', models.DecimalField(blank=True, decimal_places=2, help_text='Total amount including all taxes and charges', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Total Amount')),
                ('attachment_upload_date', models.DateField(blank=True, help_text='Date when attachments were uploaded', null=True, verbose_name='Attachment Upload Date')),
                ('attachment_1', models.URLField(blank=True, help_text='URL to attachment 1', max_length=1000, null=True, verbose_name='Attachment 1')),
                ('attachment_2', models.URLField(blank=True, help_text='URL to attachment 2', max_length=1000, null=True, verbose_name='Attachment 2')),
                ('attachment_3', models.URLField(blank=True, help_text='URL to attachment 3', max_length=1000, null=True, verbose_name='Attachment 3')),
                ('attachment_4', models.URLField(blank=True, help_text='URL to attachment 4', max_length=1000, null=True, verbose_name='Attachment 4')),
                ('attachment_5', models.URLField(blank=True, help_text='URL to attachment 5', max_length=1000, null=True, verbose_name='Attachment 5')),
                ('upload_batch_id', models.CharField(db_index=True, help_text='Unique identifier for the upload session', max_length=100, verbose_name='Upload Batch ID')),
                ('uploaded_filename', models.CharField(help_text='Original filename of the uploaded file', max_length=255, verbose_name='Uploaded Filename')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Item-wise GRN Record',
                'verbose_name_plural': 'Item-wise GRN Records',
                'db_table': 'item_wise_grn',
                'ordering': ['s_no', 'grn_created_at'],
                'indexes': [models.Index(fields=['grn_no'], name='item_wise_g_grn_no_a81b6d_idx'), models.Index(fields=['po_no'], name='item_wise_g_po_no_f2cd56_idx'), models.Index(fields=['sku_code'], name='item_wise_g_sku_cod_615ab8_idx'), models.Index(fields=['supplier'], name='item_wise_g_supplie_fe7c6c_idx'), models.Index(fields=['upload_batch_id'], name='item_wise_g_upload__3dbe07_idx'), models.Index(fields=['grn_created_at'], name='item_wise_g_grn_cre_1a72a7_idx'), models.Index(fields=['supplier_invoice_date'], name='item_wise_g_supplie_aeaf61_idx'), models.Index(fields=['created_at'], name='item_wise_g_created_c975ef_idx')],
                'unique_together': {('grn_no', 'po_no', 'sku_code', 'upload_batch_id')},
            },
        ),
    ]
